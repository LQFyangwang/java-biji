1、基本数据类型
	byte 字节类型 1byte 8bit -2的7次方到2的7次方-1   -128~127，超出这个范围的值不能赋值给byte类型
	char 字符类型 2bytes 16bit -2的15次方到2的15次方-1；Unicode编码，英文字符与中文字符都占用2个字节
	short 短整型数 2byte 16bit　-2的15次方到2的15次方-1　-32768~32767
	int 整型数 4bytes 32bit   -2的31次方到2的31次方-1
	long 长整型数 8bytes 64bit -2的63次方到2的63次方-1
	
	float 单精度浮点类型 4bytes 32bit 如果小数赋值给float类型，则需要在数字后面加F（f）
		为了保证数据的精确，可以换用double类型，或者如果这个数字的所有位数<=7位
	double 双精度浮点类型 8bytes 64bit 如果直接写一个小数点的数字，默认为double类型
		如果数据量大考虑用double类型，而不用float类型
		
		不管是float还是double都会出现数据精度丢失的情况，不能用于处理金钱（Decimal）
	
	boolean 布尔类型 1byte 8bit  true/false
	
	类型转换问题：
		显式转换(强制转换):大范围数据转换到小范围数据，出现精度丢失的情况
			int a = 127;
			byte b = (byte) a;
		隐式转换(自动转换)：byte->char->short->int->long
							long->float
							long->double						

	*引用数据类型
							
2、运算符
	算术运算符：+， -， *， /， ++a(a++)， --， %
	赋值运算符：=, +=， -+， *=， /=, %=
	比较运算符：>, <, >=, <=, ==, !=
	逻辑运算符：&&, ||, &, |, !
	位运算符：^, <<, >>, ~
	? :
	instanceof:用来判断对象是否为某个类的实例

3、流程控制
	1)if...else if...else
	2)switch...case       default, break
	3)do...while
	4)while	
	5)for
	
	6)break与contiune，当满足某个条件时跳出循环，跳出当前循环直接到下一次循环

4、数组
	1）一维数组
		data_type[] variable_name = {};
		data_type[] variable_name = new data_type[length];
		
		如果没有被初始化的部分，byte, short, int, long来说默认为0， char默认为空字符，float默认为0.0f, double默认为0.0
		
	2)二维数组
		data_type[][] variable_name = {{}, {}, {}...};
		data_type[][] variable_name = new data_type[row][]; // 必须指定多少行，可不指定多少列 
		如何对二维数组进行循环操作？
			先对行循环，再对列循环
			int[][] a = new int[3][];
			for (int row = 0; row < a.length; row++) {
				for (int col = 0; col < a[row].length; col++) {
					a[row][col];
				}
			}
		Java里的二维数组每一行的长度可以不一样

	int[] a = {};  a.length  获取a数组的元素的个数
	int[][] a ={{},{}}  a.length 获取的是a二维数组中有多少个一维数组（有多少个行）
		a[0].length  获取的是二维数组中第一个一维数组的元素个数
		a[1].length  获取的是二维数组中第二个一维数组的元素个数
		
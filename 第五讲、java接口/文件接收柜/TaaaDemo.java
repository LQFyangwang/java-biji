package com.ht.test5;

import com.ht.test4.TestDemo;

public class TaaaDemo {
	/*
	 * 
	 * 实参是指向数据的真正地址的变量参数，形参只是一个副本或者是地址的副本。 一般情况下在调用函数的时候传递的是实参，在函数内部的参数是形参。
	 * 形参是为了让传递进来的数据可以被使用才有的。 形参出现在函数定义中，在整个函数体内都可以使用，
	 * 离开该函数则不能使用。实参出现在主调函数中，进入被调函数后，实参变量也不能使用。 形参和实参的功能是作数据传送。发生函数调用时，
	 * 主调函数把实参的值传送给被调函数的形参从而实现主调函数向被调函数的数据传送。
	 * 
	 * 1.形参变量只有在被调用时才分配内存单元，在调用结束时， 即刻释放所分配的内存单元。因此，形参只有在函数内部有效。
	 * 函数调用结束返回主调函数后则不能再使用该形参变量。
	 * 
	 * 2.实参可以是常量、变量、表达式、函数等， 无论实参是何种类型的量，在进行函数调用时，它们都必须具有确定的值， 以便把这些值传送给形参。
	 * 因此应预先用赋值，输入等办法使实参获得确定值。
	 * 
	 * 3.实参和形参在数量上，类型上，顺序上应严格一致， 否则会发生“类型不匹配”的错误。
	 * 
	 * 4.函数调用中发生的数据传送是单向的。 即只能把实参的值传送给形参，而不能把形参的值反向地传送给实参。
	 * 因此在函数调用过程中，形参的值发生改变，而实参中的值不会变化。
	 */

	// 方法可能是实例成员或者是类成员，静态方法是类成员，非静态方法属于是实例成员
	
	/*
	 * 只有静态方法才是类的成员，非静态方法都是对象的成员 
	 * 静态方法是可以通过 类名.方法名(参数)的形式来调用，
	 * 不需要创建对象 而非静态方法必须使用
	 * 对象.方法名(参数)的形式来调用
	 */
	
	//-----方法属于类中的成员(member)X
	
	
	
	public void tesedemo(int a,int b){
	
		System.out.println(a+"---"+b);
		a=0;
	}
	public void test1(){
		tesedemo(1,'a');
	}
	
	
	
}

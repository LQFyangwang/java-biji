import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.Stack;

import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
public class MainPanel extends JPanel{
	Stack<Integer> step;//保存每一步操作的方向
	/*LEFT=1(推了箱子=1；没推箱子=11）
	 *RIGHT=3(推了箱子=3；没推箱子=31）
	 *UP=2(推了箱子=2；没推箱子=21）
	 *DOWN=4(推了箱子=4；没推箱子=41）
	 * 
	 * */
	//定义一个常量数组，加载图片
	final Image pic[]={
			new ImageIcon("pic/0.gif").getImage(),
			new ImageIcon("pic/1.gif").getImage(),
			new ImageIcon("pic/2.gif").getImage(),
			new ImageIcon("pic/3.gif").getImage(),
			new ImageIcon("pic/4.gif").getImage(),
			new ImageIcon("pic/5.gif").getImage(),
			new ImageIcon("pic/6.gif").getImage(),
			new ImageIcon("pic/7.gif").getImage(),
			new ImageIcon("pic/8.gif").getImage(),
			new ImageIcon("pic/9.gif").getImage()
			
	};
	//定义地图数组20*20
	/*
	 * 元素的值就是对应图片的名称
	 * 
	 * */
	final int data1[][]={
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,1,4,1,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,1,1,1,1,3,1,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,1,4,2,3,5,1,1,1,0,0,0,0,0,0},
			{0,0,0,0,0,0,1,1,1,3,2,3,4,1,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,1,2,1,1,1,1,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,1,4,1,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
	
	};
	final int data2[][]={
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,1,2,5,4,4,4,1,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,1,2,2,2,2,2,1,1,0,0,0,0,0,0},
			{0,0,0,0,0,1,1,1,3,2,2,2,2,1,0,0,0,0,0,0},
			{0,0,0,0,0,1,2,2,2,2,2,2,2,1,0,0,0,0,0,0},
			{0,0,0,0,0,1,2,3,2,1,3,1,2,1,0,0,0,0,0,0},
			{0,0,0,0,0,1,2,2,2,1,2,2,2,1,0,0,0,0,0,0},
			{0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
			
	};
	final int data3[][]={
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,1,2,2,5,1,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,1,2,3,3,1,0,1,1,1,0,0,0,0,0,0},
			{0,0,0,0,0,1,2,3,2,1,0,1,4,1,0,0,0,0,0,0},
			{0,0,0,0,0,1,1,1,2,1,1,1,4,1,0,0,0,0,0,0},
			{0,0,0,0,0,0,1,1,2,2,2,2,4,1,0,0,0,0,0,0},
			{0,0,0,0,0,0,1,2,2,2,1,2,2,1,0,0,0,0,0,0},
			{0,0,0,0,0,0,1,2,2,2,1,1,1,1,0,0,0,0,0,0},
			{0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
			
	};
	final int data4[][]={
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,1,2,2,2,2,2,1,1,1,0,0,0,0,0,0},
			{0,0,0,0,1,1,3,1,1,1,2,2,2,1,0,0,0,0,0,0},
			{0,0,0,0,1,5,2,2,3,2,2,3,2,1,0,0,0,0,0,0},
			{0,0,0,0,1,2,4,4,1,2,3,2,1,1,0,0,0,0,0,0},
			{0,0,0,0,1,1,4,4,1,2,2,2,1,0,0,0,0,0,0,0},
			{0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
			
	};
	final int data5[][]={
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,1,1,2,2,1,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,1,5,3,2,1,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,1,1,3,2,1,1,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,1,1,2,3,2,1,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,1,4,3,2,2,1,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,1,4,4,9,4,1,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
			
	};
	final int data6[][]={
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,1,2,5,1,1,1,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,1,2,3,2,2,1,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,1,1,1,2,1,2,1,1,0,0,0,0,0,0},
			{0,0,0,0,0,0,1,4,1,2,1,2,2,1,0,0,0,0,0,0},
			{0,0,0,0,0,0,1,4,3,2,2,1,2,1,0,0,0,0,0,0},
			{0,0,0,0,0,0,1,4,2,2,2,3,2,1,0,0,0,0,0,0},
			{0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
	};
	final int data7[][]={
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},			
			{0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0},
			{0,0,0,0,1,1,1,1,2,2,2,2,2,1,0,0,0,0,0,0},
			{0,0,0,0,1,2,2,2,4,1,1,1,2,1,0,0,0,0,0,0},
			{0,0,0,0,1,2,1,2,1,2,2,2,2,1,1,0,0,0,0,0},
			{0,0,0,0,1,2,1,2,3,2,3,1,4,2,1,0,0,0,0,0},
			{0,0,0,0,1,2,1,2,2,9,2,2,1,2,1,0,0,0,0,0},
			{0,0,0,0,1,2,4,1,3,2,3,2,1,2,1,0,0,0,0,0},
			{0,0,0,0,1,1,2,2,2,2,1,2,1,2,1,1,1,0,0,0},
			{0,0,0,0,0,1,2,1,1,1,4,2,2,2,2,5,1,0,0,0},
			{0,0,0,0,0,1,2,2,2,2,2,1,1,2,2,2,1,0,0,0},
			{0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0},			
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
	};
	final int data8[][]={
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},			
			{0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0},
			{0,0,0,0,0,0,0,0,1,1,2,2,1,2,5,1,0,0,0,0},
			{0,0,0,0,0,0,0,0,1,2,2,2,1,3,2,1,0,0,0,0},
			{0,0,0,0,0,0,0,0,1,3,2,2,3,2,2,1,0,0,0,0},
			{0,0,0,0,0,0,0,0,1,2,3,1,1,2,2,1,0,0,0,0},
			{0,0,0,0,0,0,1,1,1,2,3,2,1,2,1,1,0,0,0,0},
			{0,0,0,0,0,0,1,4,4,4,4,4,2,2,1,0,0,0,0,0},
			{0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0},			
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
	};
	final int data9[][]={
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0},
			{0,0,0,0,0,0,0,1,1,1,2,2,2,2,1,0,0,0,0,0},
			{0,0,0,0,0,0,1,1,4,2,3,1,1,2,1,1,0,0,0,0},
			{0,0,0,0,0,0,1,4,4,3,2,3,2,2,5,1,0,0,0,0},
			{0,0,0,0,0,0,1,4,4,2,3,2,3,2,1,1,0,0,0,0},
			{0,0,0,0,0,0,1,1,1,1,1,1,2,2,1,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0},			
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
	};
	final int data10[][]={
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0},
			{0,0,0,0,0,0,1,2,2,1,1,2,2,2,1,0,0,0,0,0},
			{0,0,0,0,0,0,1,2,2,2,3,2,2,2,1,0,0,0,0,0},
			{0,0,0,0,0,0,1,3,2,1,1,1,2,3,1,0,0,0,0,0},
			{0,0,0,0,0,0,1,2,1,4,4,4,1,2,1,0,0,0,0,0},
			{0,0,0,0,0,1,1,2,1,4,4,4,1,2,1,1,0,0,0,0},
			{0,0,0,0,0,1,2,3,2,2,3,2,2,3,2,1,0,0,0,0},
			{0,0,0,0,0,1,2,2,2,2,2,1,2,2,5,1,0,0,0,0},
			{0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0},			
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
	};
	final int data11[][]={
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,1,1,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0},
			{0,0,1,2,2,1,1,1,1,1,1,1,4,4,1,1,1,0,0,0},
			{0,0,1,2,3,2,3,2,3,2,2,1,4,4,4,4,1,0,0,0},
			{0,0,1,2,3,2,2,2,3,3,2,1,9,9,9,4,1,0,0,0},
			{0,0,1,2,3,2,3,2,3,2,2,1,4,4,9,4,1,0,0,0},
			{0,0,1,2,2,3,2,3,2,3,2,1,9,4,9,4,1,0,0,0},
			{0,0,1,1,2,3,2,3,2,3,2,4,9,4,9,4,1,1,0,0},
			{0,0,1,2,2,3,2,3,2,3,2,4,9,4,9,4,5,1,0,0},
			{0,0,1,2,2,3,2,3,2,3,2,1,9,4,9,4,1,1,0,0},
			{0,0,1,2,3,2,3,2,3,2,2,1,4,4,9,4,1,0,0,0},
			{0,0,1,2,3,2,2,2,3,3,2,1,9,9,9,4,1,0,0,0},
			{0,0,1,2,3,2,3,2,3,2,2,1,4,4,4,4,1,0,0,0},
			{0,0,1,2,2,1,1,1,1,1,1,1,4,4,1,1,1,0,0,0},
			{0,0,1,1,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
	};
	int temp_map[][],map[][];
	int level;
	int manx,many;//记录人的位置
	public MainPanel() {
		addKeyListener(new KeyHandle());
		level = 1;//默认第一关
		//创建堆栈对象
		step = new Stack<Integer>();
		init();
	}
	public MainPanel(int level) {
		this.level = level;
		init();
	}
	//初始化函数
	public void init(){
		step.clear();//每一局开始时清空堆栈的数据
		int t[][]=null;
		switch(level){
		case 1:
			t = data1;
			break;
		case 2:
			t = data2;
			break;
		case 3:
			t = data3;
			break;
		case 4:
			t = data4;
			break;
		case 5:
			t = data5;
			break;
		case 6:
			t = data6;
			break;
		case 7:
			t = data7;
			break;
		case 8:
			t = data8;
			break;
		case 9:
			t = data9;
			break;
		case 10:
			t = data10;
			break;
		case 11:
			t = data11;
			break;
		}
		//拷贝地图数据
		temp_map = new int[20][20];//临时数据
		map = new int[20][20];//原始数据
		for(int i=0;i<t.length;i++){
			for(int j=0;j<t[0].length;j++){
				 temp_map[i][j]=t[j][i];
				 map[i][j] = t[j][i];
				 if(t[j][i]==5){
					 manx=i;//初始化人的位置
					 many=j;
				 }
			}
		}
		System.out.println("manx="+manx+";many="+many);
		repaint();//画图
		setSize(600,600);//大小
		setBackground(Color.red);
		requestFocus();//获取焦点
	}
	@Override
	public void paint(Graphics g) {
		for(int i=0;i<temp_map.length;i++){
			for(int j=0;j<temp_map[i].length;j++){
				g.drawImage(pic[temp_map[i][j]],i*30,j*30,30,30,this);
			}
		}

	}
	public boolean isWin(){
		boolean bok=true;
		for(int i=0;i<20;i++)
			for(int j=0;j<20;j++){
				if((map[i][j]==4 || map[i][j]==9) && temp_map[i][j]!=9 ){
					bok=false;
				}
			}
		return bok; 
	}

	public void goUp(){//向上推箱子
		
		if(temp_map[manx][many-1]==3 || temp_map[manx][many-1]==9){
			if(temp_map[manx][many-2]==2){
				temp_map[manx][many-2]=3;//草地变箱子
				temp_map[manx][many-1]=8;//箱子的地方变向上的人
				if(map[manx][many]==4 || map[manx][many]==9)
					temp_map[manx][many]=4;
				else
					temp_map[manx][many]=2;
				many--;
				//往堆栈里面添加一个元素
				step.push(2);//上走
			}else if(temp_map[manx][many-2]==4){
				temp_map[manx][many-2]=9;//草地变推到位的箱子
				temp_map[manx][many-1]=8;//箱子的地方变向上的人
				if(map[manx][many]==4 || map[manx][many]==9)
					temp_map[manx][many]=4;
				else
					temp_map[manx][many]=2;
				many--;
				step.push(2);//上走
			}
		}else if(temp_map[manx][many-1]==2 || temp_map[manx][many-1]==4){
			temp_map[manx][many-1]=8;//箱子的地方变向上的人
			if(map[manx][many]==4 || map[manx][many]==9)
				temp_map[manx][many]=4;
			else
				temp_map[manx][many]=2;
			many--;
			step.push(21);//上走
		}
	}
	public void goDown(){
		if(temp_map[manx][many+1]==3 || temp_map[manx][many+1]==9){
			if(temp_map[manx][many+2]==2){
				temp_map[manx][many+2]=3;//草地变箱子
				temp_map[manx][many+1]=5;//箱子的地方变向下的人
				if(map[manx][many]==4 || map[manx][many]==9)
					temp_map[manx][many]=4;
				else
					temp_map[manx][many]=2;
				many++;
				step.push(4);//下走
			}else if(temp_map[manx][many+2]==4){
				temp_map[manx][many+2]=9;//草地变推到位的箱子
				temp_map[manx][many+1]=5;//箱子的地方变向下的人
				if(map[manx][many]==4 || map[manx][many]==9)
					temp_map[manx][many]=4;
				else
					temp_map[manx][many]=2;
				many++;
				step.push(4);//下走
			}
		}else if(temp_map[manx][many+1]==2 || temp_map[manx][many+1]==4){
			temp_map[manx][many+1]=5;//箱子的地方变向下的人
			if(map[manx][many]==4 || map[manx][many]==9)
				temp_map[manx][many]=4;
			else
				temp_map[manx][many]=2;
			many++;
			step.push(41);//下走
		}
	}
	//向左移动箱子
	public void goLeft(){
		if(temp_map[manx-1][many]==3 || temp_map[manx-1][many]==9){
			if(temp_map[manx-2][many]==2){
				temp_map[manx-2][many]=3;//草地变箱子
				temp_map[manx-1][many]=6;//箱子的地方变向左的人
				if(map[manx][many]==4 || map[manx][many]==9)
					temp_map[manx][many]=4;
				else
					temp_map[manx][many]=2;
				manx--;
				step.push(1);//左走
			}else if(temp_map[manx-2][many]==4){
				temp_map[manx-2][many]=9;//草地变推到位的箱子
				temp_map[manx-1][many]=6;//箱子的地方变向左的人
				if(map[manx][many]==4 || map[manx][many]==9)
					temp_map[manx][many]=4;
				else
					temp_map[manx][many]=2;
				manx--;
				step.push(1);//左走
			}
		}else if(temp_map[manx-1][many]==2 || temp_map[manx-1][many]==4){
			temp_map[manx-1][many]=6;//箱子的地方变向左的人
			if(map[manx][many]==4 || map[manx][many]==9)
				temp_map[manx][many]=4;
			else
				temp_map[manx][many]=2;
			manx--;
			step.push(11);//左走
		}
	}
	//向右移动箱子
	public void goRight(){
		if(temp_map[manx+1][many]==3 || temp_map[manx+1][many]==9){
			if(temp_map[manx+2][many]==2){
				temp_map[manx+2][many]=3;//草地变箱子
				temp_map[manx+1][many]=7;//箱子的地方变向右的人
				if(map[manx][many]==4 || map[manx][many]==9)
					temp_map[manx][many]=4;
				else
					temp_map[manx][many]=2;
				manx++;
				step.push(3);//右走
			}else if(temp_map[manx+2][many]==4){
				temp_map[manx+2][many]=9;//草地变推到位的箱子
				temp_map[manx+1][many]=7;//箱子的地方变向右的人
				if(map[manx][many]==4 || map[manx][many]==9)
					temp_map[manx][many]=4;
				else
					temp_map[manx][many]=2;
				manx++;
				step.push(3);//右走
			}
		}else if(temp_map[manx+1][many]==2 || temp_map[manx+1][many]==4){
			temp_map[manx+1][many]=7;//箱子的地方变向右的人
			if(map[manx][many]==4 || map[manx][many]==9)
				temp_map[manx][many]=4;
			else
				temp_map[manx][many]=2;
			manx++;
			step.push(31);//右走
		}
	}
	class KeyHandle extends KeyAdapter{//适配器类
		@Override
		public void keyPressed(KeyEvent e) {
			switch(e.getKeyCode()){
			case KeyEvent.VK_LEFT://按左键
				goLeft();
				break;
			case KeyEvent.VK_UP://按向上方向键
				goUp();
				break;
			case KeyEvent.VK_RIGHT://按向右方向键
				goRight();
				break;
			case KeyEvent.VK_DOWN://按向下方向键
				goDown();
				break;
			}
			repaint();//重画界面
			if(isWin()){
				JOptionPane.showMessageDialog(null,"恭喜你过关了");
				if(level<11){
					level++;
					init();
				}
			}
		}
	}
	public void back(){//悔一步
		//判断堆栈是否为空
		if(step.isEmpty())
			return;
		
		
		//Removes the object at the top of this stack and returns that object as the value of this function
		//pop从堆栈里面取一个元素，同时把该元素删除
		int st = step.pop();
		System.out.println("back="+st);
		
		switch(st){
		case 1://左
		case 11:
			backLeft(st);
			break;
		case 2:
		case 21:
			backUp(st);
			break;//上
		case 3://右
		case 31:
			backRight(st);
			break;
		case 4://下
		case 41:
			backDown(st);
			break;
		}
		repaint();
	}
	//往左悔一步
	public void backLeft(int direction){
		//人的后面是否能走
		if(temp_map[manx+1][many]==2 || temp_map[manx+1][many]==4){//左边是草地
			//人的前面是否有箱子
			if(temp_map[manx-1][many]==3 || temp_map[manx-1][many]==9)
			{
				temp_map[manx+1][many]=6;
				if(direction==11){//没推箱子
					if(map[manx][many]==4)
						temp_map[manx][many]=4;
					else
						temp_map[manx][many]=2;
				}else{//推了箱子
					if(map[manx][many]==4 || map[manx][many]==9)
						temp_map[manx][many]=9;
					else
						temp_map[manx][many]=3;
					
					if(map[manx-1][many]==4 || map[manx-1][many]==9){
						temp_map[manx-1][many]=4;
					}
					else{
						temp_map[manx-1][many]=2;
					}
				}
				manx++;
			}else{
				temp_map[manx+1][many]=6;
				if(map[manx][many]==4)
					temp_map[manx][many]=4;
				else
					temp_map[manx][many]=2;
				manx++;
			}
		}
	}
	//往右悔一步
	public void backRight(int direction){
		//人的后面是否能走
		if(temp_map[manx-1][many]==2 || temp_map[manx-1][many]==4){//左边是草地
			//人的前面是否有箱子
			if(temp_map[manx+1][many]==3 || temp_map[manx+1][many]==9)
			{
				temp_map[manx-1][many]=7;
				if(direction==31){//没推箱子
					if(map[manx][many]==4)
						temp_map[manx][many]=4;
					else
						temp_map[manx][many]=2;
				}else{//推了箱子
					if(map[manx][many]==4 || map[manx][many]==9)
						temp_map[manx][many]=9;
					else
						temp_map[manx][many]=3;
					
					if(map[manx+1][many]==4 || map[manx+1][many]==9){
						temp_map[manx+1][many]=4;
					}
					else{
						temp_map[manx+1][many]=2;
					}
				}
				manx--;
			}else{
				temp_map[manx-1][many]=7;
				if(map[manx][many]==4)
					temp_map[manx][many]=4;
				else
					temp_map[manx][many]=2;
				manx--;
			}
		}
	}
	//往上悔一步
	public void backUp(int direction){
		//人的后面是否能走
		if(temp_map[manx][many+1]==2 || temp_map[manx][many+1]==4){//后边是草地
			//人的前面是否有箱子
			if(temp_map[manx][many-1]==3 || temp_map[manx][many-1]==9)
			{
				temp_map[manx][many+1]=8;
				if(direction==21){//没推箱子
					if(map[manx][many]==4)
						temp_map[manx][many]=4;
					else
						temp_map[manx][many]=2;
				}else{//推了箱子
					if(map[manx][many]==4 || map[manx][many]==9)
						temp_map[manx][many]=9;
					else
						temp_map[manx][many]=3;
					
					if(map[manx][many-1]==4 || map[manx][many-1]==9){
						temp_map[manx][many-1]=4;
					}
					else{
						temp_map[manx][many-1]=2;
					}
				}
				many++;
			}else{
				temp_map[manx][many+1]=8;
				if(map[manx][many]==4)
					temp_map[manx][many]=4;
				else
					temp_map[manx][many]=2;
				many++;
			}
		}
	}
	//往上悔一步
	public void backDown(int direction){
		//人的后面是否能走
		if(temp_map[manx][many-1]==2 || temp_map[manx][many-1]==4){//左边是草地
			//人的前面是否有箱子
			if(temp_map[manx][many+1]==3 || temp_map[manx][many+1]==9)
			{
				temp_map[manx][many-1]=5;
				if(direction==41){//没推箱子
					if(map[manx][many]==4)
						temp_map[manx][many]=4;
					else
						temp_map[manx][many]=2;
				}else{//推了箱子
					if(map[manx][many]==4 || map[manx][many]==9)
						temp_map[manx][many]=9;
					else
						temp_map[manx][many]=3;
					
					if(map[manx][many+1]==4 || map[manx][many+1]==9){
						temp_map[manx][many+1]=4;
					}
					else{
						temp_map[manx][many+1]=2;
					}
				}
				many--;
			}else{
				temp_map[manx][many-1]=5;
				if(map[manx][many]==4)
					temp_map[manx][many]=4;
				else
					temp_map[manx][many]=2;
				many--;
			}
		}
	}
}
